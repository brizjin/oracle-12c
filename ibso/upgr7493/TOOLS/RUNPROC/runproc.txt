        Назначение RUNPROC

	RUNPROC модуль позволяет выполнять задания Oracle в
указанные моменты времени (по расписанию), оформленные в виде 
исполняемых PL/SQL блоков в пользовательских сессиях на сервере.
Причем под каждое задание создается своя пользовательская сессия,
т.е. задания могут выполняться параллельно. RUNPROC при работе 
держит также одну сессию для обработки команд от приложений
Oracle. Взаимодействие с сервером Oracle осуществляется через 
интерфейсный пакет модуля - RUNPROC_PKG. 


        Последовательность установки RUNPROC

1. Следует создать UNIX-пользователя (либо выбрать существующего), под 
именем которого будет осуществляться администрирование RUNPROC, создать
домашний каталог для серверных компонент, куда следует скопировать 
соответствующие используемой платформе библиотеку librunproc.so (librunproc.sl)
и исполняемый модуль runproc. Также следует создать подкаталог для ведения 
журнала отладочной информации работы модуля (например, log). Также следует 
задать переменную окружения для запуска разделяемых библиотек (на большинстве 
unix-платформ - это LD_LIBRARY_PATH, для HPUX PA32 - SHLIB_PATH, для AIX - 
LIBPATH, для 64-битного Solaris - LD_LIBRARY_PATH_64), чтобы были доступны 
runtime библиотека Oracle OCI (libclntsh.so) и собственная библиотека runproc 
(librunproc.so), которые использует исполняемый модуль runproc. Следует отметить, 
что библиотека Oracle OCI может именоваться по-разному для разных версий
Oracle, поэтому может потребоваться создание символьного линка на
эту библиотеку, чтобы разрешить внешние зависимости модуля runproc
и его библиотеки. Для ряда платформ библиотека и модуль поставляются
в двух вариантах - 32-битном и 64-битном, используемый вариант определяется
суффиксом в имени компоненты.

2. Под пользователем-владельцем БД (под SYS) необходимо зарегистрировать
библиотеку LIBRUNPROC для поддержки возможности управления
запуском агента runproc обработки очереди заданий RUNPROC через 
механизм выполнения внешних процедур агентом extproc. Для этого 
следует выполнить скрипт c_sys.sql из-под SQL*Plus.

3. Под именем пользователя-владельца схемы IBSO нужно создать необходимые
для работы модуля объекты - таблицу QUERIES, пакеты RUNPROC_PKG,
RUNPROC_MGR, пользователя RUNPROC. Для этого следует выполнить скрипт 
c_all.sql из-под SQL*Plus.

4. Необходимо отредактировать файл настроек RUNPROC-модуля, указав 
актуальные значения для основных параметров (правильные пути, владельца
схемы IBSO и строку соединения), описание которых приведено ниже.
При запуске модуля через агента внешних процедур extproc, следует указать 
правильный путь к файлу настроек модуля на сервере в системной
настройке JOBS_RUNPROC_INI для пользователя-владельца IBSO
(таблица settings - см.ниже). Модуль RUNPROC может использоваться для
обслуживания нескольких экземпляров IBSO, при этом для каждого из
обслуживаемых экземпляров следует создать свои файлы настроек и выполнить
пп.2-3 для установки серверных компонент в БД.

5. Для запуска агента runproc через механизм выполнения внешних
процедур следует соответствующим образом настроить listener для запуска
агента внешних процедур extproc. Описание настройки см. файл 
TOOLS\listener.txt каталога UPGRADE ТЯ.


        Описание файла настроек RUNPROC-модуля (runproc.ini):

RPROC_UID     = runproc/runproc
- Строка соединения к базе, должна быть задана и должна содержать
  login под служебным пользователем, который должен быть заранее
  создан (по умолчанию - пользователь RUNPROC).

DBID          = ibs
- Имя базы данных - ORACLE_SID - текущего экземпляра Oracle, должно быть
  задано, если используется соединение с БД по IPC-протоколу; если
  используется соединение по TCP/IP-протоколу, указание настройки
  не обязательно, т.к. tns-алиас задается в самой строке соединения, 
  указываемой настройкой RPROC_UID.


RPROC_SHEMA   = IBS
или
RPROC_SСHEMA  = IBS
- Имя схемы-владельца, куда установлена поддержка модуля - пакет RUNPROC_PKG,
  настройка обязательна; название настройки, содержащее ошибку - RPROC_SHEMA, 
  поддерживается из соображений совместимости с прежней версией.

CARDDIR       = /u/tools/runproc
или
ROOTDIR       = /u/tools/runproc
- Домашний каталог, куда установлен RUNPROC, настройка должна быть задана;
  название настройки CARDDIR поддерживается из соображений 
  совместимости с прежней версией.

LOGSDIR       = log
- Подкаталог домашнего каталога для вывода отладочной информации при работе 
  модуля RUNPROC. Если не задан, то информация пишется в домашний каталог
  (ROOTDIR).

SRVBANK       = runproc
- Логическое имя модуля, используется для формирования имени файла для 
  вывода отладочной информации, которое формируется по правилу 
  <SRVBANK>_<RPROC_SСHEMA>.log. Если настройка не задана, то используется 
  имя runproc.

DEBUG       = 0
- Уровень вывода отладочной информации модулем RUNPROC, определяет степень 
  подробности журналируемой информации, которая увеличивается при увеличении
  значения настройки, значение 0 отключает ведение журнала. Отсутствие настройки
  интерпретируется как 0.

PIPEWAIT      = 15
- Максимальный тайм-аут ожидания в секундах при сканировании очереди 
  заданий RUNPROC. Если настройка не задана, то используется значение 15.
  Меньшее значение повышает оперативность реакции модуля runproc на
  изменение очереди заданий, при этом увеличивается дополнительная нагрузка
  на сервер БД за счет более частого сканирования очереди заданий RUNPROC
  (особенно если в очереди накапливается множество записей, которые вовремя
  не удаляются).

PTIMEOUT      = 300
- Минимальный тайм-аут в секундах неактивности сессий, обрабатывающих
  задания RUNPROC, по истечении которого сессии закрываются. Если 
  настройка не задана, то используется значение 300.


        Описание системных параметров схемы IBSO (таблица settings):

JOBS_RUNPROC_INI - полный путь к файлу настроек RUNPROC. Если не задан,
  то принимается значение runproc.ini.

JOBS_RUNPROC_USER - имя пользовательской учетной записи (пользователь Oracle)
  для соединения агента RUNPROC c БД (по умолчанию RUNPROC).

JOBS_DEFAULE_QUEUE - тип очереди заданий по умолчанию для системного 
  типа "Выполнение заданий по расписанию" (SYSTEM_JOBS). Допустимые
  значения: 
    ORACLE (по умолчанию) - задания Oracle (dba_jobs via dbms_job), 
    RUNPROC - задания для агента очереди заданий RUNPROC.

JOBS_MAX_FAILURES - максимальное количество попыток перезапуска заданий 
  при возникновении ошибок (по умолчанию 10).
  


        Администрирование RUNPROC-модуля

	Запуск агента обработки очереди заданий RUNPROC возможен
в двух режимах:

1. Автономный режим. Агент RUNPROC запускается автономно
исполняемым модулем runproc из командной строки на сервере.
Формат запуска аналогичен предыдущей версии модуля runproc 
(который исполнялся только в таком режиме):
runproc [-c runproc.ini] [start|stop|version]  
  где:
  -c - признак указания имени файла настроек следующим параметром;
  runproc.ini - файл настроек модуля (если файл настроек не указан,
                то используется имя runproc.ini из текущего каталога,
                откуда выполняется команда запуска;
  start - признак запуска агента runproc в отдельном (порождаемом)
          процессе;
  stop  - признак остановки выполнения агента runproc;
  version - вывод на консоль версии модуля.
Если команд для runproc (start|stop|version) в параметрах командной
строки не задано, то агент runproc запускается на выполнение в том
же процессе, в котором запущена основная команда.

2. Запуск через внешнюю библиотеку агентом extproc непосредственно
из хранимой процедуры сервера Oracle. При этом исполняемый модуль
runproc не используется, а используется только его библиотека
librunproc.so (librunproc.sl). Управление запуском-остановом
агента runproc при этом осуществляется через интерфейс пакета
RUNPROC_MGR:

function  run_server(p_check boolean default true)  return pls_integer;
-- функция выполнения агента очереди заданий RUNPROC, возвращает код
   завершения выполнения (см.ниже);
   p_check - признак проверки активности агента runproc, при значении
             true (по умолчанию), если агент активен, то новый агент
             не запускается;
   
procedure submit_job;
-- процедура постановки задания по выполнению агента runproc в очередь
   заданий Oracle.

procedure stop_job(p_quit boolean default false);
-- процедура остановки задания по выполнению агента runproc (при p_quit=true 
   прерывание выполнения без ожидания завершения активных заданий).

function  find_job return number;
-- функция поиска в очереди заданий Oracle задания агента runproc,
   в случае успешного поиска возвращает номер задания (dba_jobs.job),
   иначе - пустое значение.

procedure run_job ( p_job number, p_date in out nocopy date, p_broken in out nocopy boolean );
-- процедура выполнения агента runproc через очередь заданий Oracle
   (служебная процедура, вызов доступен только из очереди заданий Oracle).


        Коды возврата RUNPROC-модуля

0  - успешное завершение;
10 - выход по команде останова (успешное завершение);
11 - ошибка переполнения внутренней очереди обработки запросов;
12 - ошибка соединения с БД (потеря соединения);
13 - ошибка нехватки памяти для внутренних буферов;
14 - ошибка чтения файла настроек (файл настроек не найден);
15 - ошибки отсутствия ключевых настроек в файле настроек (неправильный формат файла);
-10 - выполнение прервано по команде;
-32767 - фатальная ошибка (внутренняя);
<0 - ошибки инициализации OCI.


        Пользовательские процедуры пакета RUNPROC_PKG

function  TEST_SERVER return boolean;
-- функция проверки активности агента runproc, возвращает true,
   если агент запущен (активен), false - если агент не запущен
   (не активен).

procedure STOP_SERVER(p_quit boolean default false);
-- процедура остановки выполнения агента runproc (при p_quit=true 
   прерывание выполнения без ожидания завершения активных заданий).

procedure PUT_COMMAND(p_cmd varchar2);
-- посылка команды агенту runproc, передаваемой в параметре p_cmd;
   параметр p_cmd может принимать следующие значения:
   TEST - проверка активности агента runproc;
   EXIT - команда остановки;
   NULL - пустая команда;
   DEBUG:<N> - установка значения <N> для уровня отладки
               (см. описание настройки DEBUG файла настроек);
   PIPEWAIT:<N> - установка значения <N> для тайм-аута ожидания
               (см. описание настройки PIPEWAIT файла настроек);
   PTIMEOUT:<N> - установка значения <N> для тайм-аута неактивности
               (см. описание настройки PTIMEOUT файла настроек);
   REFRESH - обновление и коррекция состояний очереди запросов
             агента runproc (таблица queries);
   DELETE - удаление из очереди запросов уже исполненных 
            запросов (в состоянии EXECUTED);
   CLEAR- полная очистка всех запросов из очереди RUNPROC
          (очистка таблицы queries - служебная команда);
   QUIT - команда прерывания выполнения (служебная команда).
 




